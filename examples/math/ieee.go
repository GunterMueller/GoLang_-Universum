package main

// (c) Christian Maurer   v. 241005 - license see µU.go

import (
  "fmt"
  "µU/ieee"
  "µU/R"
)

func main() {
  var (f float64; s string)
/*/
  f, s = 0.5,        "0011111111100000000000000000000000000000000000000000000000000000"
  f, s = 1.23456789, "0011111111110011110000001100101001000010100000111101111000011011"
  f, s = 0.0078125,  "0011111110000000000000000000000000000000000000000000000000000000"
  f, s = 18.4,       "0100000000110010011001100110011001100110011001100110011001100110"
  f, s = -1.0,       "1011111111110000000000000000000000000000000000000000000000000000"
  f, s = -1027.456,  "1100000010010000000011011101001011110001101010011111101111100111"
  f, s = 1 / 1.e307, "0000000000110001111110100001100000101100010000001100011000001101"
  f, s = math.SmallestNonzeroFloat64,
                     "0000000110100101011011100001111111000010111110001111001101011001"
  f, s = 23.0,       "0100000000110111000000000000000000000000000000000000000000000000"
  f, s = 1234.56789e17, "0100010000011010110001010011101001111101111110010011110101101001"
/*/
  f, s = 1023,       "0100000010001111111110000000000000000000000000000000000000000000"
  f, s = 27,         "0100000000111011000000000000000000000000000000000000000000000000"
  f, s = 12,         "0100000000101000000000000000000000000000000000000000000000000000"
  f, s = 15,         "0100000000101110000000000000000000000000000000000000000000000000"
//                    "10000001000" 1032; 1032 - 1023 = 9
  if R.Integer (f) { println ("r ganz") } else { println ("r nicht ganz") }
  x := ieee.New()
  x.SetFloat64 (f)
  fmt.Println ("       f  ==", f)
  fmt.Println ("Encode(f) ==", x.String())
  fmt.Println ("       s  ==", s)
  x.SetString (s)
  fmt.Println ("Decode(s) ==", x.Float64())
}
