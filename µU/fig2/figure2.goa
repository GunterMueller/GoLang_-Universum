package fig2

// (c) Christian Maurer   v. 211221 - license see µU.go

import (
  "math"
  . "µU/obj"
  "µU/str"
  "µU/kbd"
  "µU/font"
  "µU/col"
  "µU/scr"
  "µU/box"
  "µU/errh"
  "µU/sel"
  "µU/ppm"
  "µU/psp"
)
const (
  lenName = 10
  lenText = 40
)
type
  figure struct {
                Type
         colour col.Colour
           x, y []int
         marked,
         filled bool
                string
                }
var (
  wd, ht int
  bx = box.New()
  name = []string {"Punktfolge",
                   "Strecke(n)",
                   "Polygon   ",
                   "Kurve     ",
                   "Gerade    ",
                   "Rechteck  ",
                   "Kreis     ",
                   "Ellipse   ",
                   "Text      ",
                   "Bild      "}
)

func init() {
  bx.Transparence (true)
  bx.Wd (lenText)
}

func new_() Figure {
  wd, ht = int(scr.Wd()), int(scr.Ht())
  f := new(figure)
  f.Clr()
  f.Type = Segments
  f.colour, _ = col.StartCols()
  return f
}

func (f *figure) imp (Y Any) *figure {
  y, ok := Y.(*figure)
  if ! ok { TypeNotEqPanic (f, Y) }
  return y
}

func (f *figure) Empty() bool {
  return len (f.x) == 0
}

func (f *figure) Clr() {
  f.x, f.y = nil, nil
  f.marked, f.filled = false, false
  f.string = ""
}

func (f *figure) SetType (t Type) {
  f.Clr()
  f.Type = t
}

func (f *figure) Select() {
  f.Clr()
  scr.SetFontsize (font.Normal)
  n := uint(Rectangle)
  y, x := scr.MousePos()
  sel.Select1 (name, NTypes, lenName, &n, y, x, col.LightWhite(), col.Blue())
  if n < NTypes {
    f.Type = Type (n)
  }
}

func (f *figure) Eq (Y Any) bool {
  f1 := f.imp (Y)
  n, n1 := uint(len (f.x)), uint(len (f1.x))
  if f.Type != f1.Type || n != n1 || f.filled != f1.filled {
    return false
  }
  if n == 0 { return true } // ?
  if f.x[0] != f1.x[0] || f.y[0] != f1.y[0] {
    return false
  }
  switch f.Type {
  case Text, Image:
    if f.x[1] != f1.x[1] || f.y[1] != f1.y[1] ||
       f.string != f1.string {
      return false
    }
  default:
    for i := uint(1); i < n; i++ {
      if f.x[i] != f1.x[i] || f.y[i] != f1.y[i] {
        return false
      }
    }
  }
  return true
}

func (x *figure) Less (Y Any) bool {
  return false
}

func (f *figure) Copy (Y Any) {
  f1 := f.imp (Y)
  f.Type = f1.Type
  f.colour.Copy (f1.colour)
  n1 := uint(len(f1.x))
  f.x, f.y = make ([]int, n1), make ([]int, n1)
  for i := uint(0); i < n1; i++ {
    f.x[i] = f1.x[i]
    f.y[i] = f1.y[i]
  }
  f.filled = f1.filled
  f.marked = f1.marked
  f.string = f1.string
  if f.Type == Image {
    // TODO copy the image
  }
}

func (x *figure) Clone() Any {
  y := new_()
  y.Copy (x)
  return y
}

func (f *figure) Pos() (int, int) {
  return f.x[0], f.y[0]
}

func (f *figure) SetPos (x, y int) {
  f.WriteInv()
  dx, dy := x - f.x[0], y - f.y[0]
  n := len(f.x)
  for i := 0; i < n; i++ {
    f.x[i] += dx
    f.y[i] += dy
  }
  f.Write()
}

func (f *figure) On (a, b int, t uint) bool {
  switch f.Type {
  case Points:
    return scr.OnPoints (f.x, f.y, a, b, t)
  case Segments:
    return scr.OnSegments (f.x, f.y, a, b, t)
  case Polygon:
    return scr.OnPolygon (f.x, f.y, a, b, t)
  case Curve:
    return scr.OnCurve (f.x, f.y, a, b, t)
  case InfLine:
    return scr.OnInfLine (f.x[0], f.y[0], f.x[1], f.y[1], a, b, t)
  case Rectangle:
    return scr.OnRectangle (f.x[0], f.y[0], f.x[1], f.y[1], a, b, t)
  case Circle:
    return scr.OnCircle (f.x[0], f.y[0], uint(f.x[1]), a, b, t)
  case Ellipse:
    return scr.OnEllipse (f.x[0], f.y[0], uint(f.x[1]), uint(f.y[1]), a, b, t)
  case Text:
    return scr.InRectangle (f.x[0], f.y[0], f.x[1], f.y[1], a, b, 0)
  case Image:
    return scr.InRectangle (f.x[0], f.y[0], f.x[1], f.y[1], a, b, 0)
  }
  return false
}

func (f *figure) convex() bool {
  n := uint(len(f.x))
  switch f.Type {
  case Rectangle, Circle, Ellipse, Image:
    return true
  case Polygon:
    switch n {
    case 0, 1:
      return false
    case 2:
      return true
    }
  default:
    return false
  }
/*
// more than 2 nodes TODO
  dxi := f.x[0] - f.x[n - 1]
  dxk := f.x[1] - f.x[0]
  dyi := f.y[0] - f.y[n - 1]
  dyk := f.y[1] - f.y[0]
  z := uint(0)
  if dxi * dxk + dyi * dyk < 0 { z = 1 }
  a := dxi * dyk
  b := dxk * dyi
  if a == b { // polygon reduced by a node
    return true
    // for n > 3 we are going to roasted in devils oven ...
  }
  gr := a > b
  var k uint
  for i := uint(1); i < n; i++ {
    if i < n { k = i + 1 } else { k = 0 }
    dxi = f.x[i] - f.x[i - 1]
    dyi = f.y[i] - f.y[i - 1]
    dxk = f.x[k] - f.x[i]
    dyk = f.y[k] - f.y[i]
    if dxi * dxk + dyi * dyk < 0 { // Winkel < 90 Grad
      z++
      if z > 3 {  // if more than 3 angles are < 90°, then
        return false // the angle sum is < (n - 1) * 180° !
      }
    }
    a = dxi * dyk
    b = dxk * dyi
    if a != b {
      if (a > b) != gr { return false }
    }
  }
*/
  return true
}

func (f *figure) UnderMouse (t uint) bool {
  a, b := scr.MousePosGr()
  return f.On (a, b, t)
}

func (f *figure) remainsOnEboard (dx, dy int) bool {
  n := len(f.x)
  W, H := scr.Wd(), scr.Ht()
  w, h := int(W), int(H)
  for i := 0; i < n; i++ {
    if f.x[i] + dx < 0 || f.x[i] + dx >= w || f.y[i] + dy < 0 || f.y[i] + dy >= h {
      return false
    }
  }
  return true
}

func (f *figure) Move (dx, dy int) {
  n := len(f.x)
  switch f.Type {
  case Circle, Ellipse:
    scr.CircleFull (f.x[0], f.y[0], 2)
    n = 1
  case Text, Image:
    n = 2
  }
  if f.Type == Image {
    if f.remainsOnEboard (dx, dy) {
      for i := 0; i < n; i++ {
        f.x[i] += dx
        f.y[i] += dy
      }
    }
    scr.Rectangle (f.x[0], f.y[0], f.x[1], f.y[1])
  } else {
    if f.remainsOnEboard (dx, dy) {
      f.WriteInv()
      for i := 0; i < n; i++ {
        f.x[i] += dx
        f.y[i] += dy
      }
      f.Write()
    }
  }
}

func (f *figure) Marked() bool {
  return f.marked
}

func (f *figure) Mark (m bool) {
  f.marked = m
}

func (f *figure) SetColour (c col.Colour) {
  if f.Type != Image {
    f.colour = c
  }
}

func (f *figure) Colour() col.Colour {
  return f.colour
}

func (f *figure) Erase() {
  switch f.Type {
  case Image:
    scr.ClrGr (f.x[0], f.y[0], f.x[1], f.y[1])
  default:
    c := f.colour
    f.SetColour (scr.ScrColB())
    f.Write()
    f.SetColour (c)
  }
}

func (f *figure) String() string {
  return name[f.Type]
}

func (f *figure) Defined (s string) bool {
  str.OffSpc1 (&s)
  str.Norm (&s, lenName)
  for t := Type(0); t < NTypes; t++ {
    if s == name[t] {
      f.Type = t
      return true
    }
  }
  return false
}

func (f *figure) Write() {
  if f.Empty() { return }
  scr.ColourF (f.colour)
  switch f.Type {
  case Points:
    scr.Points (f.x, f.y)
  case Segments:
    scr.Segments (f.x, f.y)
  case Polygon:
    scr.Polygon (f.x, f.y)
    if f.filled {
//      scr.PolygonFull (f.x, f.y) // not yet implemented
    }
  case Curve:
    scr.Curve (f.x, f.y)
  case InfLine:
    scr.InfLine (f.x[0], f.y[0], f.x[1], f.y[1])
  case Rectangle:
    if f.filled {
      scr.RectangleFull (f.x[0], f.y[0], f.x[1], f.y[1])
    } else {
      scr.Rectangle (f.x[0], f.y[0], f.x[1], f.y[1])
    }
  case Circle:
    if f.filled {
      scr.CircleFull (f.x[0], f.y[0], uint(f.x[1]))
    } else {
      scr.Circle (f.x[0], f.y[0], uint(f.x[1]))
    }
  case Ellipse:
    if f.filled {
      scr.EllipseFull (f.x[0], f.y[0], uint(f.x[1]), uint(f.y[1]))
    } else {
      scr.Ellipse (f.x[0], f.y[0], uint(f.x[1]), uint(f.y[1]))
    }
  case Text:
    bx.Wd (str.ProperLen (f.string))
    bx.ColourF (f.colour)
    bx.WriteGr (f.string, f.x[0], f.y[0])
  case Image:
    ppm.Get (f.string, uint(f.x[0]), uint(f.y[0]))
  }
}

func (f *figure) WriteInv() {
  if f.Empty() { return }
  switch f.Type {
  case Points:
    scr.PointsInv (f.x, f.y)
  case Segments:
    scr.SegmentsInv (f.x, f.y)
  case Polygon:
    if f.filled {
      scr.PolygonFullInv (f.x, f.y)
    } else {
      scr.PolygonInv (f.x, f.y)
    }
  case Curve:
    scr.CurveInv (f.x, f.y)
  case InfLine:
    scr.InfLineInv (f.x[0], f.y[0], f.x[1], f.y[1])
  case Rectangle:
    if f.filled {
      scr.RectangleFullInv (f.x[0], f.y[0], f.x[1], f.y[1])
    } else {
      scr.RectangleInv (f.x[0], f.y[0], f.x[1], f.y[1])
    }
  case Circle:
    if f.filled {
      scr.CircleFullInv (f.x[0], f.y[0], uint(f.x[1]))
    } else {
      scr.CircleInv (f.x[0], f.y[0], uint(f.x[1]))
    }
  case Ellipse:
    if f.filled {
      scr.EllipseFullInv (f.x[0], f.y[0], uint(f.x[1]), uint(f.y[1]))
    } else {
      scr.EllipseInv (f.x[0], f.y[0], uint(f.x[1]), uint(f.y[1]))
    }
  case Text:
// >>>  sollte in bx integriert werden:
//  bx.WriteInvGr (string, x[0], y[0])
    scr.Transparence (true)
    scr.WriteInvGr (f.string, f.x[0], f.y[0])
  }
}

func (f *figure) editPoints() {
  xm, ym := 0, 0
  scr.ColourF (f.colour)
  loop:
  for {
    c, _ := kbd.Command()
    scr.MousePointer (true)
    switch c {
    case kbd.To:
      break loop
    case kbd.Drag:
      xm, ym = scr.MousePosGr()
      f.x, f.y = append (f.x, xm), append (f.y, ym)
      scr.Point (xm, ym)
    }
  }
}

func (f *figure) editSPC() {
  scr.ColourF (f.colour)
  xm, ym, n := f.x[0], f.y[0], 0
  loop:
    for {
    c, d := kbd.Command()
    scr.MousePointer (true)
    switch c {
    case kbd.This:
      xm, ym = scr.MousePosGr()
      f.x, f.y = append (f.x, xm), append (f.y, ym)
      if f.Type == Polygon {
        f.filled = f.convex() && d > 0
      }
      break loop
    case kbd.Go:
      n = len(f.x)
      scr.LineInv (f.x[n-1], f.y[n-1], xm, ym)
      xm, ym = scr.MousePosGr()
      scr.Line (f.x[n-1], f.y[n-1], xm, ym)
    case kbd.Here:
      if n == 0 { continue }
      scr.LineInv (f.x[n-1], f.y[n-1], xm, ym)
      xm, ym = scr.MousePosGr()
      n = len(f.x)
      f.x, f.y = append (f.x, xm), append (f.y, ym)
      scr.Line (f.x[n-1], f.y[n-1], f.x[n], f.y[n])
    }
  }
}

func (f *figure) editInfLine() {
// TODO start with horizontal infLine
  scr.ColourF (f.colour)
  f.x, f.y = append (f.x, f.x[0]), append (f.y, f.x[0])
  loop:
  for {
    c, _ := kbd.Command()
    switch c {
    case kbd.Drag:
      if f.x[1] != f.x[0] || f.y[1] != f.y[0] {
        scr.InfLineInv (f.x[0], f.y[0], f.x[1], f.y[1])
      }
      f.x[1], f.y[1] = scr.MousePosGr()
      if f.x[1] != f.x[0] || f.y[1] != f.y[0] {
        scr.InfLine (f.x[0], f.y[0], f.x[1], f.y[1])
      }
    case kbd.To:
      break loop
    }
  }
}

func (f *figure) editRectangle() {
  scr.ColourF (f.colour)
  f.x = append (f.x, f.x[0])
  f.y = append (f.y, f.x[0])
  loop:
  for {
    c, d := kbd.Command()
    switch c {
    case kbd.Drag:
      scr.RectangleInv (f.x[0], f.y[0], f.x[1], f.y[1])
      f.x[1], f.y[1] = scr.MousePosGr()
      scr.Rectangle (f.x[0], f.y[0], f.x[1], f.y[1])
    case kbd.To:
      f.filled = d > 0
      break loop
    }
  }
}

func (f *figure) editCircle() {
  scr.ColourF (f.colour)
  f.x = append (f.x, 0); f.y = append (f.y, 0)
  f.x = append (f.x, 0); f.y = append (f.y, 0)
  loop:
  for {
    c, d := kbd.Command()
    switch c {
    case kbd.Drag:
      scr.CircleInv (f.x[0], f.y[0], uint(f.x[1]))
      f.x[2], f.y[2] = scr.MousePosGr()
      dx, dy := float64((f.x[2]-f.x[0])*(f.x[2]-f.x[0])), float64((f.y[2]-f.y[0])*(f.y[2]-f.y[0]))
      f.x[1] = int(math.Sqrt (dx + dy) + 0.5)
      scr.Circle (f.x[0], f.y[0], uint(f.x[1]))
    case kbd.To:
      f.filled = d > 0
      break loop
    }
  }
}

func (f *figure) editEllipse() {
  scr.ColourF (f.colour)
  f.x, f.y = append (f.x, 0), append (f.y, 0)
  loop:
  for {
    c, d := kbd.Command()
    switch c {
    case kbd.Drag:
      scr.EllipseInv (f.x[0], f.y[0], uint(f.x[1]), uint(f.y[1]))
      f.x[1], f.y[1] = scr.MousePosGr()
      if f.x[1] > f.x[0] {
        f.x[1] -= f.x[0]
      } else {
        f.x[1] = f.x[0] - f.x[1]
      }
      if f.y[1] > f.y[0] {
        f.y[1] -= f.y[0]
      } else {
        f.y[1] = f.y[0] - f.y[1]
      }
      scr.Ellipse (f.x[0], f.y[0], uint(f.x[1]), uint(f.y[1]))
    case kbd.To:
      f.filled = d > 0
      break loop
    }
  }
}

func (f *figure) editText() {
  scr.MousePointer (false)
  bx.Wd (lenText)
  bx.ColourF (f.colour)
  x1 := f.x[0] + int(lenText * scr.Wd1()) - 1
  if x1 >= wd { x1 = wd - 1 }
  y1 := f.y[0] + int(scr.Ht1()) - 1
  if y1 >= ht { y1 = ht - 1 }
  scr.SaveGr (f.x[0], f.y[0], x1, y1)
  bx.Transparence (false)
  f.string = str.New (lenText) // wörkeraunt
  bx.EditGr (&f.string, f.x[0], f.y[0])
  bx.Transparence (true)
  scr.RestoreGr (f.x[0], f.y[0], x1, y1)
  if c, _ := kbd.LastCommand(); c == kbd.Enter {
    bx.Transparence (true)
    scr.RestoreGr (f.x[0], f.y[0], x1, y1)
    bx.WriteGr (f.string, f.x[0], f.y[0])
    k := str.ProperLen (f.string)
    f.x, f.y = append (f.x, int(scr.Wd1() * k) - 1), append (f.y, int(scr.Ht1()) - 1)
    scr.WarpMouseGr (f.x[0], f.y[1])
  } else {
    f.Clr()
  }
  f.Write()
  scr.MousePointer (true)
}

func (f *figure) editImage() {
  scr.MousePointer (false)
  errh.Hint ("Name des Bildes eingeben")
  bx.Wd (lenText)
  bx.Colours (f.colour, scr.ScrColB())
  f.string = str.New (uint(len(name[0])))
  scr.SaveGr (f.x[0], f.y[0] + 16, f.x[0] + lenText * 8, f.y[0])
  bx.EditGr (&f.string, f.x[0], f.y[0])
  errh.DelHint()
  str.OffSpc (&f.string)
  W, H := ppm.Size (f.string)
  w, h := int(W) - 1, int(H) - 1
  if f.x[0] + w <= wd && f.y[0] + h <= ht {
    f.x, f.y = append (f.x, f.x[0] + w), append (f.y, f.y[0] + h)
    scr.RestoreGr (f.x[0], f.y[0] + 16, f.x[0] + lenText * 8, f.y[0])
  } else {
    scr.RestoreGr (f.x[0], f.y[0] + 16, f.x[0] + lenText * 8, f.y[0]) // XXX
    f.x, f.y = nil, nil
  }
}

func (f *figure) pointUnderMouse() (uint, bool) {
  xm, ym := scr.MousePosGr()
  n := uint(len(f.x))
  for i := uint(0); i < n; i++ {
    if scr.InCircle (f.x[i], f.y[i], 4, xm, ym, 4) {
      return i, true
    }
  }
  return 0, false
}

// TODO
func (f *figure) mark (i uint) {
//  if f.Type != Curve { return }
  for r := uint(3); r <= 4; r++ {
    scr.CircleInv (f.x[i], f.y[i], r)
  }
}

func (f *figure) Edit() {
  if f.Empty() {
    scr.ColourF (f.colour)
    f.x, f.y = make ([]int, 1), make ([]int, 1)
    f.x[0], f.y[0] = scr.MousePosGr()
    switch f.Type {
    case Points:
      f.editPoints()
    case Segments, Polygon, Curve:
      f.editSPC()
    case InfLine:
      f.editInfLine()
    case Rectangle:
      f.editRectangle()
    case Circle:
      f.editCircle()
    case Ellipse:
      f.editEllipse()
    case Text:
      f.editText()
    case Image:
      f.editImage()
    }
    if f.x == nil {
      f.Clr()
    }
    return
  }
  switch f.Type {
  case Text:
    f.string = str.New (uint(len(f.string)))
    f.editText()
  case Image:
    f.editImage()
  default:
    i, ok := f.pointUnderMouse()
    if ! ok { return }
    loop:
    for {
      scr.MousePointer (true)
      xm, ym := scr.MousePosGr()
      c, _ := kbd.Command()
      switch c {
      case kbd.Here:
//        scr.CircleFull (f.x[i], f.y[i], 3)
      case kbd.Drag:
//        scr.CircleFullInv (f.x[i], f.y[i], 3)
        xm, ym = scr.MousePosGr()
        f.x[i], f.y[i] = xm, ym
        f.Write()
//        scr.CircleFull (xm, ym, 3)
      case kbd.To:
        f.WriteInv()
//        scr.CircleFullInv (xm, ym, 3)
        xm, ym = scr.MousePosGr()
        f.x[i], f.y[i] = xm, ym
        f.Write()
        break loop
      }
    }
  }
}

func (f *figure) Print (p psp.PostscriptPage) {
  if f.Empty() { return }
  n := uint(len (f.x))
  p.SetColour (f.colour)
  switch f.Type {
  case Points:
    x, y := make ([]float64, n), make ([]float64, n)
    for i := uint(0); i < n; i++ {
      x[i], y[i] = p.S (f.x[i]), p.Sy (f.y[i])
    }
    p.Points (x, y)
  case Segments:
    x, y := make ([]float64, n), make ([]float64, n)
    for i := uint(0); i < n; i++ {
      x[i], y[i] = p.S (f.x[i]), p.Sy (f.y[i])
    }
    p.Segments (x, y)
  case Polygon:
    x, y := make ([]float64, n), make ([]float64, n)
    for i := uint(0); i < n; i++ {
      x[i], y[i] = p.S (f.x[i]), p.Sy (f.y[i])
    }
    p.Polygon (x, y, f.filled)
  case Curve:
    x, y := make ([]float64, n), make ([]float64, n)
    for i := uint(0); i < n; i++ {
      x[i], y[i] = p.S (f.x[i]), p.Sy (f.y[i])
    }
    p.Curve (x, y)
  case InfLine:
    x, y, x1, y1 := p.S (f.x[0]), p.Sy (f.y[0]), p.S (f.x[1]), p.Sy (f.y[1])
    p.Line (x, y, x1, y1)
  case Rectangle:
    x, y, x1, y1 := p.S (f.x[0]), p.Sy (f.y[0]), p.S(f.x[1]), p.Sy (f.y[1])
    p.Rectangle (x, y, x1 - x, y1 - y, f.filled)
  case Circle:
    x, y, r := p.S (f.x[0]), p.Sy (f.y[0]), p.S (f.x[1])
    p.Circle (x, y, r, f.filled)
  case Ellipse:
    x, y, a, b := p.S (f.x[0]), p.Sy (f.y[0]), p.S (f.x[1]), p.S (f.y[1])
    p.Ellipse (x, y, a, b, f.filled)
  case Text:
    x, y := p.S (f.x[0]), p.Sy (f.y[0])
    p.Write (f.string, x, y)
  case Image:
// TODO
  }
}

func (f *figure) Codelen() uint {
  n := uint(1) // f.Type
  n += f.colour.Codelen()
  n += C0 // len(f.x)
  switch f.Type {
  case Text:
    n += 2 * C0 + 1 + uint(len (f.string))
  case Image:
    n += 4 * C0 + 1 + uint(len (f.string))
  default:
    n += 2 * uint(len (f.x)) * C0
  }
  n += 2 * C0 // Reserve
  return uint(n)
}

func (f *figure) Encode() Stream {
  bs := make (Stream, f.Codelen())
  a := uint(0)
  bs[a] = byte(f.Type)
  a++
  copy (bs[a:a+f.colour.Codelen()], f.colour.Encode())
  a += f.colour.Codelen()
  n := uint(len(f.x))
  if f.Type == Text || f.Type == Image {
    n = uint(len(f.string))
  }
  copy (bs[a:a+C0], Encode (n))
  a += C0
  switch f.Type {
  case Text, Image:
    copy (bs[a:a+C0], Encode (f.x[0]))
    a += C0
    copy (bs[a:a+C0], Encode (f.y[0]))
    a += C0
    if f.Type == Image {
      copy (bs[a:a+C0], Encode (f.x[1]))
      a += C0
      copy (bs[a:a+C0], Encode (f.y[1]))
      a += C0
    }
    copy (bs[a:a+n], Stream(f.string))
    a += n
  default:
    for i := uint(0); i < n; i++ {
      copy (bs[a:a+C0], Encode (f.x[i]))
      a += C0
      copy (bs[a:a+C0], Encode (f.y[i]))
      a += C0
    }
  }
  bs[a] = 0
  if f.filled { bs[a] ++ }
  if f.marked { bs[a] += 2 }
  return bs
}

func (f *figure) Decode (bs Stream) {
  a := uint(0)
  f.Type = Type(bs[a])
  a++
  f.colour.Decode (bs[a:a+f.colour.Codelen()])
  a += f.colour.Codelen()
  n := Decode (uint(0), bs[a:a+C0]).(uint)
  a += C0
  if f.Type < Text {
    f.x, f.y = make ([]int, n), make ([]int, n)
    for i := uint(0); i < n; i++ {
      f.x[i] = Decode (f.x[i], bs[a:a+C0]).(int)
      a += C0
      f.y[i] = Decode (f.y[i], bs[a:a+C0]).(int)
      a += C0
    }
  } else { // Text, Image
    f.x, f.y = make ([]int, 2), make ([]int, 2)
    f.x[0] = Decode (f.x[0], bs[a:a+C0]).(int)
    a += C0
    f.y[0] = Decode (f.y[0], bs[a:a+C0]).(int)
    a += C0
    if f.Type == Image {
      f.x[1] = Decode (f.x[1], bs[a:a+C0]).(int)
      a += C0
      f.y[1] = Decode (f.y[1], bs[a:a+C0]).(int)
      a += C0
    }
    f.string = string(bs[a:a+n])
    a += n
    if f.Type == Text {
      f.x[1] = f.x[0] + int(scr.Wd1()) * int(n) - 1
      f.y[1] = f.y[0] + int(scr.Ht1()) - 1
    }
  }
  f.filled = bs[a] % 2 == 1
  f.marked = (bs[a] / 2) % 2 == 1
}
