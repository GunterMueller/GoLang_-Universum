package reg

// (c) Christian Maurer   v. 210512 - license see ÂµU.go

type
  Register interface { // Registers with integer values.
    // For all methods, the preposition is the the calling
    // register was generated by a value assignment of Null()
    // or the value of a function with a register as value.
    // The calling register is always denoted by "x".

// Pre: The value of x is incremented by 1.
  Inc()

// Pre: x has a value > 0.
// The value of x is decremented by 1.
  Dec()

// Returns true, iff x has a value > 0.
  Gt0() bool

// Returns a new register with the sum
// of the values of a and x as value.
  Add (a Register) Register

// Returns a new register with the product
// of the values of a and x as value.
  Mul (a Register) Register

// The value of x is written in a line to the screen.
  Write()
}

// Returns a new register with the value 0.
func Null() Register { return null() }

type Registers interface { // sequences of registers

// Returns true, iff x is not empty,
// i.e, iff it contains at least one register.
  NotEmpty() bool

// Returns a register with the number of registers as value.
  Num() Register

// Pre: x is not empty.
// Returns the first register of x.
  Head() Register

// Pre: x ist nicht leer.
// Returns the tail of x,
// i.e,. x without its first register before.
  Tail() Registers

// Returns the sequence with r as first register and x as tail.
  Cons (r Register) Registers
}

// Pre: x is either empty or consists of only one register or
//      of some registers, seperated by periods.
// Returns a sequence of type registers.
// It is empty, if a was empty; otherwise it contains
// exactly the passed registers in the given order.
func New (a ...Register) Registers { return new_(a...) }

type RegFunc func (a Registers) Register
type RegFunc1 func (a Register, as Registers) Register
